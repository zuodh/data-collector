package com.data.shuzi.datacollector.limit;import com.google.common.util.concurrent.RateLimiter;import org.aspectj.lang.ProceedingJoinPoint;import org.aspectj.lang.annotation.Around;import org.aspectj.lang.annotation.Aspect;import org.aspectj.lang.annotation.Before;import org.aspectj.lang.annotation.Pointcut;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.context.annotation.Scope;import org.springframework.stereotype.Component;/** * @author zizuo.zdh * @ClassName LimitAspect * @Description TODO * @Date 2018/6/26 9:48 * @Version 1.0 **/@Component@Aspectpublic class LimitAspect {    private static final Logger logger=LoggerFactory.getLogger(LimitAspect.class);    private static RateLimiter rateLimiter=RateLimiter.create(100);    @Pointcut(value = "@annotation(com.data.shuzi.datacollector.limit.ServiceLimit)")    public void serviceAop(){    }    @Around(value = "serviceAop()")    public Object around(ProceedingJoinPoint point) throws Throwable {        Object object=null;        if (rateLimiter.tryAcquire()) {            object = point.proceed();            logger.info("recive token on time");        }else {            logger.info("not recive token on time");        }        return object;    }}